import Head from 'next/head'
import { getPlaiceholder } from "plaiceholder";
import { Inter } from 'next/font/google'
import { VideoList } from "../components/videoList/videoList"

import styles from '@/styles/Home.module.css'

const inter = Inter({ subsets: ['latin'] })

export default function Home({ coubs }: { coubs: Array<Item> }) {
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        {/* <pre>{JSON.stringify(coubs, undefined, 2)}</pre> */}
        <VideoList list={coubs} />
      </main>
    </>
  )
}

export const getStaticProps = async () => {
  const coubs = await fetch(
    "https://coub.com/api/v2/timeline/subscriptions/fresh?page=1"
  )
    .then((res) => res.json())
    .then(async (data) =>
      await Promise.all(data.coubs.map(async (item: any): Promise<Item> => {

        const { base64 } = await getPlaiceholder(item.picture);

        return {
          permalink: item?.permalink || null,
          videoMed: item?.file_versions?.html5?.video?.med || null,
          videoHigh: item?.file_versions?.html5?.video?.high || null,
          videoHigher: item?.file_versions?.html5?.video?.higher || null,
          audioMed: item?.file_versions?.html5?.audio?.med || null,
          title: item?.title || null,
          picture: item?.picture || null,
          blurDataURL: base64 || null,
        };
      })).then((values) => values)
    );

  return {
    props: { coubs },
    revalidate: 10,
  };
};

export type Item = {
  permalink: string | null,
  videoMed: { "url": string, "size": number } | null,
  videoHigh: { "url": string, "size": number } | null,
  videoHigher: { "url": string, "size": number } | null,
  audioMed: { "url": string, "size": number } | null,
  title: string | null,
  picture: string | null,
  blurDataURL: string | null,
}